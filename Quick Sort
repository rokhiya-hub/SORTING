/*
    BEST AND AVERAGE TIME COMPLEXITY : O(nlogn)
    WORST TIME COMPLEXITY IS : O(n^2)
     BEST AND AVERAGE SPACE COMPLEXITY : O(logn)
    WORST SPACE COMPLEXITY IS : O(n)
*/
// Function to partition the array into two subarrays
int partition(int arr[], int low, int high) 
{
   // Taking the last element as the pivot
    int pivot = arr[high];
   // Index of the smaller element
    int i = low - 1;

    for (int j = low; j < high; j++) 
    {
        if (arr[j] <= pivot)
        {
            i++;
            // Swap arr[i] and arr[j]
            int temp = arr[i];
            arr[i] = arr[j];
            arr[j] = temp;
        }
    }

    // Swap the pivot element with arr[i+1] to place the pivot in the correct position
    int temp = arr[i + 1];
    arr[i + 1] = arr[high];
    arr[high] = temp;
     // Return the partition index
    return i + 1;
}

// Recursive function to implement Quick Sort
void quickSort(int arr[], int low, int high) 
{
    if (low < high) 
     {
        // Partition the array and get the pivot index
        int pivotIndex = partition(arr, low, high);

        // Recursively sort the left and right subarrays
        quickSort(arr, low, pivotIndex - 1);
        quickSort(arr, pivotIndex + 1, high);
    }
}

int main() {
    int arr[n];
    for(int i=0;i<n;i++)
    {
       scanf("%d",&n);
    }
    // Call the quickSort function
    quickSort(arr, 0, n - 1);  

    printf("Sorted array: \n");
    for (int i = 0; i < size; i++)
    {
        printf("%d ", arr[i]);
    }
    return 0;
}
