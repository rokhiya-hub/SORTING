/* TIME COMPLEXITY :O(n).
   SPACE COMPLEXITY :O(n).
1. segregate the numbers into buckets based on the n th placed digits
2. reconstruct the array back from the buckets
*/
#include<stdio.h>
#include<math.h>
void radixsort(int arr[],int n)
{
    // 2D to hold the digits in each bucket
    int buckets[10][n];
    int max = arr[0];
    // Finding the maximum element to determine the number of digits
    for(int i=1;i<n;i++)
    {
        if(max<arr[i])
        max=arr[i];
    }
    // Find the number of digits in the maximum number
    int d=(int)log10(max) + 1;  // Number of digits
    int count[10]={0};  // Array to count occurrences of digits
    int e=1;  // Exponent for each digit (1s, 10s, 100s, etc.)
    while(d--)
    {
        // Distribute the numbers into buckets based on the current digit
     for(int i=0;i<n;i++)
     {
        int pos = (arr[i]/e)%10;// Extract the digit at current position
        buckets[pos][count[pos]]=arr[i];// Place the number in the corresponding bucket
        count[pos]++;// Increment the count for the bucket
     }
     int c=0;
     for(int i=0;i<10;i++)
     {
       // Collect the numbers from the buckets and put them back into the original array 
        for(int j=0;j<count[i];j++)
        {
            arr[c++]=buckets[i][j];
        }
     }
     // Reset the count for the next digit pass
     for (int i = 0; i < 10; i++) 
     {
        count[i] = 0;
     }
     // Move to the next digit place (1s -> 10s -> 100s -> ...)
     e*=10;
    }
}
void printarr(int arr[],int n)
{
    for(int i=0;i<n;i++)
    printf("%d ",arr[i]);
}
int main()
{
    int n;
    scanf("%d",&n);
    int arr[n];
    for(int i=0;i<n;i++)
    {
        scanf("%d",&arr[i]);
    }
    printf("BEFORE SORTING\n");
    printarr(arr,n);
    printf("\nAFTER SORTING\n");
    radixsort(arr,n);
    printarr(arr,n);
}
